// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: domains.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createDomain = `-- name: CreateDomain :one
INSERT INTO domains (id, created_at, updated_at, name, is_blocked)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5
)
RETURNING id, created_at, updated_at, name, is_blocked
`

type CreateDomainParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
	IsBlocked bool
}

func (q *Queries) CreateDomain(ctx context.Context, arg CreateDomainParams) (Domain, error) {
	row := q.db.QueryRowContext(ctx, createDomain,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.IsBlocked,
	)
	var i Domain
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.IsBlocked,
	)
	return i, err
}

const deleteDomains = `-- name: DeleteDomains :exec
DELETE FROM domains
`

func (q *Queries) DeleteDomains(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteDomains)
	return err
}

const getDomain = `-- name: GetDomain :one
SELECT id, created_at, updated_at, name, is_blocked FROM domains WHERE name = $1
`

func (q *Queries) GetDomain(ctx context.Context, name string) (Domain, error) {
	row := q.db.QueryRowContext(ctx, getDomain, name)
	var i Domain
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.IsBlocked,
	)
	return i, err
}

const getDomains = `-- name: GetDomains :many
SELECT id, created_at, updated_at, name, is_blocked FROM domains
`

func (q *Queries) GetDomains(ctx context.Context) ([]Domain, error) {
	rows, err := q.db.QueryContext(ctx, getDomains)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Domain
	for rows.Next() {
		var i Domain
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.IsBlocked,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
